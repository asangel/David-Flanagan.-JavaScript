
// Эта функция создает новый тип-перечисление. Объект в аргументе определяет
// имена и значения каждого экземпляра класса. Возвращает функцию-конструктор,
// идентифицирующую новый класс. Отметьте, однако, что конструктор возбуждает
// исключение: его нельзя использовать для создания новых экземпляров типа.
// Возвращаемый конструктор имеет свойства, которые отображают имена в значения,
// а также массив значений values и функцию foreach() для выполнения итераций 
function enumeration(namesToValues) {
    // Фиктивный конструктор, который будет использоваться как
    // возвращаемое значение.
    var enumeration = function() { throw "Нельзя создать экземпляр класса" +
                                         " Enumeration"; };
    // Перечислимые значения наследуют объект this.
    var proto = enumeration.prototype = {
        constructor: enumeration, // Идентификатор типа
        toString: function() { return this.name; },  // Возвращает имя 
        valueOf:  function() { return this.value; }, // Возвращает значение
        toJSON:  function()  { return this.name; }   // Для сериализации
    };
    enumeration.values = []; // Массив перечислимых объектов-значений
    // Теперь создать экземпляры нового типа.
    for(name in namesToValues) { // Для каждого значения
        var e = inherit(proto);  // Создать объект для его представления
        e.name = name;           // Дать ему имя
        e.value = namesToValues[name]; // И значение
        enumeration[name] = e;      // Сделать свойством конструктора
        enumeration.values.push(e); // И сохранить в массиве values
    }
    // Метод класса для обхода экземпляров класса в цикле
    enumeration.foreach = function(f,c) {
        for(var i = 0; i < this.values.length; i++) f.call(c, this.values[i]);
    };
    // Вернуть конструктор, идентифицирующий новый тип
    return enumeration;
}





// inherit() возвращает вновь созданный объект, наследующий свойства
// объекта-прототипа p. Использует функцию Object.create() из ECMAScript 5,
// если она определена, иначе используется более старый прием.
function inherit(p) {
    if (p == null) throw TypeError(); // p не может быть значением null
    if (Object.create) // Если Object.create() определена...
        return Object.create(p); // использовать ее.
    var t = typeof p; // Иначе выяснить тип и проверить его
    if (t !== "object" && t !== "function") throw TypeError();
    function f() {
    };               // Определить фиктивный конструктор.
    f.prototype = p; // Записать в его свойство prototype
                     // ссылку на объект p.
    return new f();  // Использовать f() для создания
    // "наследника" объекта p.
}
