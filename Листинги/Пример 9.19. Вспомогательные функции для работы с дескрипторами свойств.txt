
Пример 9.19. Вспомогательные функции для работы с дескрипторами свойств
// Делает указанные (или все) свойства объекта o
// недоступным для записи и настройки.
function freezeProps(o) {
    var props = (arguments.length == 1) // Если один аргумент,
        ? Object.getOwnPropertyNames(o) // изменить все свойства,
        : Array.prototype.splice.call(arguments, 1); // иначе только указанные 

    props.forEach(function(n) { // Делает каждое свойство ненастраиваемым
                                // и доступным только для чтения 
        // Пропустить ненастраиваемые свойства
        if (!Object.getOwnPropertyDescriptor(o,n).configurable) return;
        Object.defineProperty(o, n, { writable: false, configurable: false });
    });
    return o; // Чтобы можно было продолжить работу с объектом o
}

// Делает неперечислимыми указанные (или все) свойства объекта o, 
// если они доступны для настройки. 
function hideProps(o) {
    var props = (arguments.length == 1) // Если один аргумент,
        ? Object.getOwnPropertyNames(o) // изменить все свойства,
        : Array.prototype.splice.call(arguments, 1); // иначе только указанные 
    props.forEach(function(n) { // Скрыть каждое от цикла for/in
        // Пропустить ненастраиваемые свойства
        if (!Object.getOwnPropertyDescriptor(o,n).configurable) return;
        Object.defineProperty(o, n, { enumerable: false });
    });
    return o;
}

