
// Обертывание программного кода функцией позволяет определять переменные
// в области видимости функции
(function() {
    // Определить свойство objectId как неперечислимое и наследуемое
    // всеми объектами. При попытке получить значение этого свойства
    // вызывается метод чтения. Свойство не имеет метода записи, поэтому
    // оно доступно только для чтения. 
    // Свойство определяется как ненастраиваемое,
    // поэтому его нельзя удалить.
    Object.defineProperty(Object.prototype, "objectId", {
        get: idGetter, // Метод чтения значения
        enumerable: false,   // Неперечислимое
        configurable: false // Не может быть удалено
    });

    // Функция чтения, которая вызывается при попытке получить значение
    // свойства objectId
    function idGetter() {        // Функция чтения, возвращающая id
        if (!(idprop in this)) { // Если объект еще не имеет id
            if (!Object.isExtensible(this)) // И если можно добавить свойство
                throw Error("Нельзя определить id нерасширяемого объекта");
            Object.defineProperty(this, idprop, { // Добавить его.
                value: nextid++,      // Значение
                writable: false,      // Только для чтения
                enumerable: false,    // Неперечислимое
                configurable: false   // Неудаляемое
            });
        }
        return this[idprop]; // Вернуть существующее или новое значение
    };

    // Следующие переменные используются функцией idGetter() и являются
    // частными для этой функции
    var idprop = "|**objectId**|";   // Предполагается, что это свойство
                                     // больше нигде не используется
    var nextid = 1; // Начальное значение для id

}());  // Вызвать функцию обертку, чтобы выполнить программный код


