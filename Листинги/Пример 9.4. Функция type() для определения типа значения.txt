
/**
 * Возвращает тип значения в виде строки:
 * Если o - null, возвращает "null", если o - NaN, возвращает "nan".
 * Если typeof возвращает значение, отличное от "object", возвращает это значение.
 * (Обратите внимание, что некоторые реализации идентифицируют объекты
 * регулярных выражений как функции.)
 * Если значение атрибута class объекта o отличается от "Object",
 * возвращает это значение.
 * Если o имеет свойство constructor, а конструктор имеет имя, возвращает
 * имя конструктора.
 * Иначе просто возвращает "Object".
 **/
function type(o) {
    var t, c, n; // type, class, name
    // Специальный случай для значения null: 
    if (o === null) return "null";
    // Другой специальный случай: NaN единственное значение, 
    //не равное самому себе: 
    if (o !== o) return "nan";
    // Применять typeof для любых значений, отличных от "object". 
    // Так идентифицируются простые значения и функции. 
    if ((t = typeof o) !== "object") return t;
    // Вернуть класс объекта, если это не "Object".
    // Так идентифицируется большинство встроенных объектов.
    if ((c = classof(o)) !== "Object") return c;
    // Вернуть имя конструктора объекта, если имеется 
    if (o.constructor && typeof o.constructor === "function" 
                      && (n = o.constructor.getName())) return n;
    // Не удалось определить конкретный тип, поэтому остается лишь 
    // просто вернуть "Object" 
    return "Object";
}
// Возвращает класс объекта. 
function classof(o) {
    return Object.prototype.toString.call(o).slice(8,-1);
};
// Возвращает имя функции (может быть "") или null - для объектов, 
// не являющихся функциями 
Function.prototype.getName = function() { 
    if ("name" in this) return this.name;
    return this.name = this.toString().match(/function\s*([^(]*)\(/)[1];
};



