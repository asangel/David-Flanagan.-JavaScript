
/*
 * Копирует перечислимые свойства из объекта p в объект o и возвращает o.
 * Если o и p имеют свойства с одинаковыми именами, значение свойства
 * в объекте o затирается значением свойства из объекта p.
 * Эта функция не учитывает наличие методов доступа и не копирует атрибуты.
 */
function extend(o, p) {
    for(prop in p) {       // Для всех свойств в p.
        o[prop] = p[prop]; // Добавить свойство в o.
    }
    return o;
}
/*
 * Копирует перечислимые свойства из объекта p в объект o и возвращает o.
 * Если o и p имеют свойства с одинаковыми именами, значение свойства
 * в объекте o остается неизменным.
 * Эта функция не учитывает наличие методов доступа и не копирует атрибуты.
 */
function merge(o, p) {
    for (prop in p) { // Для всех свойств в p.
        if (o.hasOwnProperty[prop]) continue; // Кроме имеющихся в o. 
        o[prop] = p[prop];                    // Добавить свойство в o.
    }
    return o;
}
/*
 * Удаляет из объекта o свойства, отсутствующие в объекте p.
 * Возвращает o.
 */

function restrict(o, p) {
    for(prop in o) { // Для всех свойств в o
        if (!(prop in p)) delete o[prop]; // Удалить, если отсутствует в p
    }
    return o;
}
/*
 * Удаляет из объекта o свойства, присутствующие в объекте p. Возвращает o. */
function subtract(o, p) {
    for(prop in p) { // Для всех свойств в p
        delete o[prop]; // Удалить из o (удаление несуществующих
                        // свойств можно выполнять без опаски)
    }
    return o;
}
/*
 * Возвращает новый объект, содержащий свойства, присутствующие хотя бы в одном
 * из объектов, o или p. Если оба объекта, o и p, имеют свойства с одним
 * и тем же именем, используется значение свойства из объекта p.
 */
function union(o,p) { return extend(extend({},o), p); }
/*
 * Возвращает новый объект, содержащий свойства, присутствующие сразу в обоих
 * объектах, o или p. Результат чем-то напоминает пересечение o и p,
 * но значения свойств объекта p отбрасываются
 */
function intersection(o,p) { return restrict(extend({}, o), p); }
/*
 * Возвращает массив имен собственных перечислимых свойств объекта o.
 */
function keys(o) {
    if (typeof o !== "object") throw TypeError(); // Арг. должен быть объектом 
    var result = []; // Возвращаемый массив
    for(var prop in o) { // Для всех перечислимых свойств
        if (o.hasOwnProperty(prop)) // Если это собственное свойство, 
            result.push(prop); // добавить его в массив array.
    }
    return result; // Вернуть массив.
}
